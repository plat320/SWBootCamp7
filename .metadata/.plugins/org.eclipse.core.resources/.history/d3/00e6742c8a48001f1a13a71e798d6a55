#ifndef SNAKE_H
#define SNAKE_H

#include <stdlib.h>
#include <time.h>
#include "OS.h"
#include "queue.h"

	#define OBJECT_BLOCK_SIZE		(20)
	#define GAME_WINDOW_HIGHT		(240)
	#define GAME_WINDOW_WIDTH		(240)
	#define GAME_WINDOW_ROW			((GAME_WINDOW_HIGHT) / (OBJECT_BLOCK_SIZE))
	#define GAME_WINDOW_COLUMN		((GAME_WINDOW_WIDTH) / (OBJECT_BLOCK_SIZE))
	#define GAME_OBJECT_MAP_ROW		((GAME_WINDOW_ROW) - 2)
	#define GAME_OBJECT_MAP_COLUMN	((GAME_WINDOW_COLUMN) - 2)

	#define JOY_KEY_UP				(1)
	#define JOY_KEY_DOWN			(2)
	#define JOY_KEY_LEFT			(3)
	#define JOY_KEY_RIGHT			(4)

	#define BACKGROUND_COLOR		(0x0000)
	#define BORDER_COLOR			(0xffff)
	#define SNAKE_COLOR				(0x07e0)
	#define TARGET_COLOR			(0xf800)

//	#define STATE_READY				(0)
//	#define STATE_BLOCKED			(1)
//	#define STATE_RUNNING			(2)

	typedef struct _snake_object{
		// TODO: 머리 위치도 여기서 바로 접근 가능하게 변수 만들기, 뱀의 head, tail 변수 (포인터)
		char object_map[GAME_OBJECT_MAP_ROW][GAME_OBJECT_MAP_COLUMN];
		int head_direction;
		int queue_no;
	}SNAKE_OBJECT;

	// queue.h로 이동
//	typedef struct _point{
//		int x;
//		int y;
//	}POINT;

	extern SNAKE_OBJECT snake_object;

	void Snake_Init(void);
	void Add_Snake_Position(POINT*);
	void Remove_Snake_Position(void);
	void Lcd_Draw_Border(void);
	void Lcd_Draw_Snake(void);
//	void Lcd_Draw_New_Position(POINT* head_position, POINT* tail_position);
	void Calculate_Snake_Position(int);
	void Make_Target(void);




	// Image
	unsigned short apple_img[400] = {
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x10A0, 0x10A0,
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
	0x29A2, 0x63C6, 0x9D87, 0x1080, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
	0x2081, 0x5142, 0x0000, 0x5BE5, 0xA6C9, 0xBF8A, 0x4B04, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x48E2, 0x4223, 0x6628, 0x65C7, 0x2AE3, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
	0x0000, 0x0000, 0x0000, 0x0000, 0x2041, 0x79A7, 0xA1E8, 0x9166, 0x58C3, 0x2021, 0x4A83, 0x5BA5, 0x79E4, 0x68A4, 0x4082, 0x0000,
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x3882, 0xF38F, 0xFCB3, 0xFBAF, 0xFAEC, 0xFA6A, 0xE1C8, 0xC986, 0xE147,
	0xF988, 0xF9C9, 0xF167, 0xA8E5, 0x1020, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0800, 0xDA8B, 0xFC72, 0xF36E, 0xF2AB, 0xF2AB,
	0xF26B, 0xF22A, 0xF1E9, 0xF1C8, 0xE9A8, 0xE167, 0xD926, 0xE926, 0x98A4, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x40A2, 0xFB6E,
	0xF36E, 0xF26A, 0xF229, 0xF209, 0xF1E9, 0xF1E9, 0xE9C8, 0xE9A8, 0xE987, 0xE947, 0xD905, 0xD0E5, 0xD0A4, 0x2020, 0x0000, 0x0000,
	0x0000, 0x0000, 0x7125, 0xFB6E, 0xF2EC, 0xF22A, 0xF209, 0xF1E9, 0xF1C9, 0xF1A8, 0xE988, 0xE967, 0xE967, 0xE947, 0xD8E5, 0xC8A4,
	0xC883, 0x4821, 0x0000, 0x0000, 0x0000, 0x0000, 0x8966, 0xFB2D, 0xF28B, 0xF209, 0xF1E9, 0xF1C8, 0xF1A8, 0xE988, 0xE967, 0xE947,
	0xE926, 0xE926, 0xD8E5, 0xC083, 0xC863, 0x4821, 0x0000, 0x0000, 0x0000, 0x0000, 0x8125, 0xFACC, 0xF24A, 0xF1E9, 0xF1C8, 0xE9A8,
	0xE988, 0xE967, 0xE947, 0xE926, 0xE906, 0xE8E6, 0xE0C5, 0xB862, 0xC042, 0x3800, 0x0000, 0x0000, 0x0000, 0x0000, 0x50A3, 0xFA4A,
	0xEA09, 0xF1C8, 0xF1A8, 0xE988, 0xE967, 0xE947, 0xE927, 0xE906, 0xE8E6, 0xE0C5, 0xC883, 0xB842, 0xA821, 0x1000, 0x0000, 0x0000,
	0x0000, 0x0000, 0x1020, 0xE1C8, 0xF1C8, 0xE9A8, 0xE167, 0xE146, 0xE126, 0xE106, 0xE0E5, 0xD8C5, 0xD0A4, 0xC863, 0xB842, 0xB821,
	0x8021, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x80E4, 0xF9A8, 0xD946, 0xD926, 0xD905, 0xD0E5, 0xD0C4, 0xC8A4, 0xC883,
	0xC063, 0xC042, 0xB021, 0xB021, 0x3800, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0800, 0xC926, 0xE126, 0xD105, 0xD0E5,
	0xD0C4, 0xC8A4, 0xC883, 0xC063, 0xC042, 0xB022, 0xB001, 0x8801, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
	0x4061, 0xE906, 0xD0E5, 0xC8C4, 0xC8A4, 0xD083, 0xC863, 0xC042, 0xB021, 0xA801, 0xA801, 0x2000, 0x0000, 0x0000, 0x0000, 0x0000,
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x7082, 0xD0C4, 0xD0A4, 0xC883, 0xA042, 0x9842, 0xB021, 0xB001, 0xA001, 0x3000, 0x0000,
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x2020, 0x3821, 0x2000, 0x0000, 0x0000, 0x2800,
	0x4000, 0x1000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000
	};
	unsigned short grass_img[400] = {
	0x84E5, 0x84A6, 0x9545, 0x8D05, 0x8D25, 0x8504, 0x84C5, 0x84E5, 0x8CE5, 0x84C6, 0x84E5, 0x8505, 0x84E5, 0x84E5, 0x8504, 0x8505,
	0x8D45, 0x7D04, 0x7CC4, 0x8525, 0x84E5, 0x84E5, 0x8D25, 0x84E4, 0x84E5, 0x84E5, 0x8D05, 0x84E5, 0x7CE5, 0x7CE5, 0x8505, 0x8526,
	0x7CE6, 0x7CC5, 0x84E5, 0x84E5, 0x8505, 0x8545, 0x8505, 0x7CE4, 0x84E5, 0x8524, 0x8504, 0x84A5, 0x84A5, 0x84E5, 0x8D25, 0x8505,
	0x7CC5, 0x7CE5, 0x84E5, 0x7CC5, 0x74C5, 0x74A5, 0x7D05, 0x8505, 0x7CE5, 0x8506, 0x8D25, 0x8D05, 0x7CC5, 0x7CE4, 0x8505, 0x84C5,
	0x84E5, 0x8505, 0x8505, 0x8505, 0x7CC5, 0x7CC6, 0x8506, 0x8506, 0x8506, 0x7D05, 0x7CE5, 0x7CE5, 0x8525, 0x8505, 0x8D05, 0x84E5,
	0x7CE5, 0x7CE4, 0x84C5, 0x7CC4, 0x7D05, 0x7CE4, 0x7CC5, 0x8D25, 0x7D05, 0x7CC6, 0x7CE5, 0x8526, 0x8D66, 0x7CE5, 0x8505, 0x8525,
	0x8505, 0x7CE4, 0x7CC5, 0x7CC5, 0x8D05, 0x8D05, 0x8525, 0x84E4, 0x84E5, 0x7CE5, 0x74A4, 0x7CC5, 0x8525, 0x8525, 0x7D05, 0x7CC5,
	0x8D06, 0x8505, 0x8545, 0x7D24, 0x7CE5, 0x7CE5, 0x8505, 0x7CC5, 0x8505, 0x84E5, 0x7484, 0x9546, 0x84E4, 0x8505, 0x7CE5, 0x8D25,
	0x8544, 0x7D04, 0x8525, 0x8525, 0x84E5, 0x8525, 0x8545, 0x7D44, 0x74C5, 0x8505, 0x7CE4, 0x84E5, 0x84E5, 0x84E5, 0x7CC6, 0x8D05,
	0x8505, 0x8D45, 0x8525, 0x8505, 0x8524, 0x7D24, 0x8D45, 0x8D25, 0x8525, 0x8D45, 0x84E5, 0x8505, 0x7CE5, 0x7CE5, 0x7CE4, 0x7CE4,
	0x84E4, 0x7CC4, 0x7CC5, 0x8D05, 0x8D05, 0x84E4, 0x8525, 0x7CE4, 0x7CC4, 0x8525, 0x8525, 0x8D45, 0x7D24, 0x8D45, 0x84E5, 0x8D26,
	0x8525, 0x8526, 0x84E5, 0x7CA5, 0x84E5, 0x8504, 0x7CC5, 0x7CE5, 0x8D65, 0x7D04, 0x8525, 0x8D45, 0x7CC5, 0x7D05, 0x8504, 0x8D25,
	0x84E5, 0x8505, 0x9565, 0x8505, 0x8D25, 0x8D45, 0x8D05, 0x84C5, 0x84E5, 0x8504, 0x84E4, 0x84E5, 0x8504, 0x8505, 0x8D45, 0x7D04,
	0x7CC4, 0x8505, 0x84E5, 0x84C6, 0x9545, 0x8D05, 0x8D25, 0x8524, 0x84C5, 0x8504, 0x8D05, 0x84E6, 0x84E5, 0x84E4, 0x7CE4, 0x7CA5,
	0x84C5, 0x8D05, 0x8505, 0x8D45, 0x8505, 0x7CE4, 0x84E5, 0x84E5, 0x8D25, 0x8504, 0x8505, 0x8505, 0x8D05, 0x84C5, 0x84E4, 0x84E5,
	0x7CE5, 0x7CC5, 0x8525, 0x7CA4, 0x7CE5, 0x8525, 0x8505, 0x8505, 0x8D25, 0x8D05, 0x84E5, 0x8524, 0x8504, 0x7CE5, 0x8D25, 0x84E5,
	0x7CC5, 0x84E5, 0x7CC5, 0x84E5, 0x8506, 0x7CE5, 0x7CA4, 0x7D04, 0x8505, 0x84E5, 0x84E5, 0x8D26, 0x8D25, 0x8505, 0x7CC5, 0x84E4,
	0x8525, 0x7CC4, 0x8505, 0x8525, 0x8505, 0x84E5, 0x7CE5, 0x84E6, 0x7CE5, 0x84E5, 0x7CE4, 0x7CA5, 0x7CC5, 0x74A4, 0x7CE4, 0x8504,
	0x7CC5, 0x7CC5, 0x7CE5, 0x7CE4, 0x8505, 0x7D04, 0x8505, 0x8D25, 0x8525, 0x7D05, 0x7D05, 0x7CC6, 0x7D05, 0x7CC5, 0x74A4, 0x74A4,
	0x74C4, 0x74A4, 0x7CE4, 0x8505, 0x7CC4, 0x7CC5, 0x8D06, 0x8505, 0x84E5, 0x8D24, 0x8D25, 0x84E5, 0x8505, 0x7CC5, 0x8525, 0x8545,
	0x8525, 0x8525, 0x8505, 0x74C4, 0x7483, 0x7CC4, 0x7CE4, 0x7CE5, 0x74A5, 0x84E5, 0x8525, 0x84E5, 0x84E5, 0x8D25, 0x8524, 0x7CC4,
	0x7CC5, 0x7CE5, 0x8524, 0x7D04, 0x8D45, 0x8525, 0x8525, 0x8505, 0x7CE4, 0x7CC4, 0x8504, 0x7CC4, 0x7CC5, 0x7CC5, 0x8505, 0x8504,
	0x7CC4, 0x7CE4, 0x8505, 0x7CC5, 0x7CC5, 0x7CC5, 0x7D05, 0x7D24, 0x8525, 0x8D45, 0x7D24, 0x8524, 0x8505, 0x84E5, 0x7CC4, 0x8505,
	0x84C5, 0x7CA5, 0x8504, 0x7CE4, 0x7CE4, 0x84E4, 0x8505, 0x8505, 0x8D46, 0x7CE4, 0x7CC5, 0x8525, 0x8504, 0x8D25, 0x84E5, 0x84E5,
	0x9565, 0x8505, 0x8D25, 0x8D45, 0x84E5, 0x7CA5, 0x84E4, 0x84E4, 0x74A4, 0x7CC4, 0x8D45, 0x7D04, 0x8525, 0x8D45, 0x7CC4, 0x8505
	};

#endif // SNAKE_H
